Questao A. Near_ten
def near_ten(n):
    resto = n % 10
    dist1 = 10 - resto
    dist2 = 0 + resto
    if dist1 <= 2 or dist2 <= 2:
        return True
    return False

Questao B. Lone_sum
def lone_sum(a, b, c):
    if a == b == c:
        return 0
    if a == b:
        return c
    if a == c:
        return b
    if b == c:
        return a
    return a + b + c

Questao C. Lucky_sum
def lucky_sum(a, b, c):
    if a == 13:
        return 0
    if b == 13:
        return a
    if c == 13:
        return a + b
    return a + b + c

Questao D. Double_char
def double_char(s):
    result = ''
    for x in s:
        result += x*2
    return result

Questao E. Count_hi
def count_hi(s):
  return s.count('hi')

Questao F. Cat_dog
def cat_dog(s):
    if s.count('dog') == s.count('cat'):
        return True
    else:
        return False

Questao G. Count_code
def count_code(s):
    count = 0
    for x in range(len(s)-3):
        if s[x:x+2] == 'co' and s[x+3] == 'e':
            count += 1
    return count

Questao H. End_other
def end_other(a, b):
    a = a.lower()
    b = b.lower()
    if b.endswith(a) or a.endswith(b):
        return True
    else:
        return False

Questao I. Count_evens
def count_evens(nums):
    pares = []
    for n in nums:
        if n % 2 == 0:
            pares.append(n)
    return len(pares)

Questao J. Sum13
def sum13(nums):
    n = 0
    soma = 0
    for n in nums:
        if n == 13:
            break
        else:
            soma = soma + n
    return soma

Questao K. Has22
def has22(nums):
    return '2, 2' in str(nums)

Questao L. Soma_na_lista
def soma_na_lista(n, lista):
    return n in [x + y for x in lista for y in lista if x != y]